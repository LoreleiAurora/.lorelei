#!/bin/bash
set -e

BLUE='\033[0;34m'
NC='\033[0m' # No Color
SUDO_SET="false"

# Dotfile paths.
export DOTFILES=$HOME/.lorelei

set_sudo() {
  if [[ SUDO_SET != "true" ]]; then
    # Ask for sudo
    sudo -v
    # Keep sudo updated
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    SUDO_SET="true"
  fi
}

# Install the Xcode Command Line Tools.
DEVELOPER_DIR=$("xcode-select" -print-path 2>/dev/null || true)
if [ -z "$DEVELOPER_DIR" ] || ! [ -f "$DEVELOPER_DIR/usr/bin/git" ] || ! [ -f "/usr/include/iconv.h" ]
  then
  set_sudo
  echo -e "${BLUE}==>${NC} Installing Xcode"
  CLT_PLACEHOLDER="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
  sudo touch "$CLT_PLACEHOLDER"
  CLT_PACKAGE=$(softwareupdate -l | grep -B 1 -E "Command Line (Developer|Tools)" | awk -F"*" '/^ +\*/ {print $2}' | sed 's/^ *//' | head -n1)
  sudo softwareupdate -i "$CLT_PACKAGE" &> /dev/null
  sudo rm -f "$CLT_PLACEHOLDER"
  if ! [ -f "/usr/include/iconv.h" ]; then
    echo
    xcode-select --install &> /dev/null
    read -p "Press any key when the installation has completed."
  fi
fi

# Check if the Xcode license is agreed to and agree if not.
if /usr/bin/xcrun clang 2>&1 | grep license; then
  set_sudo
  sudo xcodebuild -license &> /dev/null
fi

# Running system updates
echo -e "${BLUE}==>${NC} Running system updates"
softwareupdate -i -a

# Install Homebrew
export GIT_DIR="/usr/local/Homebrew/.git" GIT_WORK_TREE="/usr/local/Homebrew"
if [ -d "/usr/local/Homebrew" ]
  then
  git fetch -q
else
  set_sudo
  echo -e "${BLUE}==>${NC} Installing Homebrew"
  for DIR in Cellar Frameworks Homebrew bin etc include lib opt sbin share var
    do
    sudo mkdir -p "/usr/local/${DIR}"
    sudo chown -R "$USER:admin" "/usr/local/${DIR}"
  done
  unset DIR
  ln -sf /usr/local/Homebrew/bin/brew /usr/local/bin/brew
  git init -q
  git config remote.origin.url "https://github.com/Homebrew/brew"
  git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
  git fetch -q --no-tags --depth=1 --force --update-shallow
fi
git reset -q --hard origin/master
unset GIT_DIR GIT_WORK_TREE

# Checkout or update dotfiles repo
if [ ! -d "$DOTFILES" ]
then
  echo -e "${BLUE}==>${NC} Cheching out .lorelei"
  git clone -q --recurse-submodules https://github.com/LoreleiAurora/.lorelei.git "$DOTFILES"
else
  echo -e "${BLUE}==>${NC} Updating .lorelei"
  cd "$DOTFILES"
  git pull -q
  git submodule update -q --init --recursive
fi

# Install homebrew packages.
echo -e "${BLUE}==>${NC} Installing packages with homebrew"
pushd $DOTFILES &> /dev/null
brew bundle
popd

# Updating homebrew packages.
echo -e "${BLUE}==>${NC} Updating packages with homebrew"
brew upgrade

# Link dotfiles
echo -e "${BLUE}==>${NC} Linking dotfiles"
ln -sf $DOTFILES/.zshrc $HOME/.zshrc
ln -sf $DOTFILES/.bashrc $HOME/.bashrc
ln -sf $DOTFILES/.bash_profile $HOME/.bash_profile
ln -sf $DOTFILES/.gitconfig ~/.gitconfig
ln -sf $DOTFILES/.gitignore_global $HOME/.gitignore_global

# Setting up iterm2
echo -e "${BLUE}==>${NC} Setting up iterm2"
defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "${DOTFILES}/iterm2"
defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true

# Setup ZSH
if [ "$SHELL" != "/usr/local/bin/zsh" ]; then
  echo -e "${BLUE}==>${NC} Changing shell to ZSH"
  sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
fi

source $DOTFILES/inc/common.sh

# Install perl
if [ ! -d "${HOME}/.plenv/versions/5.27.9" ]
then
  echo -e "${BLUE}==>${NC} Installing perl 5.27.9"
  plenv install 5.27.9 &> /dev/null
fi
echo -e "${BLUE}==>${NC} Setting default perl version to 5.27.9"
plenv global  5.27.9

# Install ruby
if [ ! -d "${HOME}/.rbenv/versions/2.5.0" ]
then
  echo -e "${BLUE}==>${NC} Installing ruby 2.5.0"
  rbenv install 2.5.0
fi
echo -e "${BLUE}==>${NC} Setting default ruby version to 2.5.0"
rbenv global 2.5.0
gem install bundler

# Install python
if [ ! -d "${HOME}/.pyenv/versions/2.7.14" ]
then
  echo -e "${BLUE}==>${NC} Installing python 2.7.14"
  pyenv install 2.7.14
fi
if [ ! -d "${HOME}/.pyenv/versions/3.6.4" ]
then
  echo -e "${BLUE}==>${NC} Installing python 3.6.4"
  pyenv install 3.6.4
fi
echo -e "${BLUE}==>${NC} Setting default python version to 3.6.4"
pyenv global 3.6.4

# Install virtualenv
if [ ! -f "/usr/local/bin/virtualenv" ]
then
  echo -e "${BLUE}==>${NC} Installing virtualenv"
  pip install virtualenv
fi

# Install node versions
if `! nvm ls | grep -q lts/argon`
then
  echo -e "${BLUE}==>${NC} Installing nodejs lts/argon"
  nvm install lts/argon --latest-npm
fi
if `! nvm ls | grep -q lts/boron`
then
  echo -e "${BLUE}==>${NC} Installing nodejs lts/boron"
  nvm install lts/boron --latest-npm
fi
if `! nvm ls | grep -q lts/carbon`
then
  echo -e "${BLUE}==>${NC} Installing nodejs lts/carbon"
  nvm install lts/carbon --latest-npm
fi
if `! nvm ls | grep -q stable`
then
  echo -e "${BLUE}==>${NC} Installing nodejs stable"
  nvm install stable --latest-npm
fi
echo -e "${BLUE}==>${NC} Setting default node version to stable"
nvm alias default stable

# Install go
if [ ! -d "${HOME}/.goenv/versions/1.10.0" ]
then
  echo -e "${BLUE}==>${NC} Installing python 1.10.0"
  goenv install 1.10.0
fi
echo -e "${BLUE}==>${NC} Setting default go version to 1.10.0"
goenv global 1.10.0

# Set PHP version
echo -e "${BLUE}==>${NC} Setting default PHP version to 7.2"
brew-php-switcher 72 -s

# init desk
mkdir -p "$HOME/.desk/desks"

# Disable the desktop
defaults write com.apple.finder CreateDesktop -bool FALSE;killall Finder
